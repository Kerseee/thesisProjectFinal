#ifndef caseController_hpp
#define caseController_hpp

#include <stdio.h>
#include <map>
#include <string>
#include <ostream>
#include <vector>
#include "data.hpp"
#include "planner.hpp"
#include "caseData.hpp"
#include "caseStructures.hpp"
#include "caseGenerator.hpp"
#include "casePlanner.hpp"

namespace planner {

void createRelativeFolder(std::string folder);

class MyopicExpersController{
private:
    /* Variables */
    bool has_data;
    data::CaseData data;
    int num_exper_plan;  // number of experiments for running planners
    int num_exper_gen;   // number of experiments for generating future events
    int sample_size; // sample size for stochastic planners
    std::vector<double> alphas; // parameter alpha for adjusted planners

    // orders store the orders generated by OrderGenerator
    std::map<int, std::map<int, Order> > orders;

    // demands store the orders generated by IndDemandGenerator
    std::map<int, std::map<int, std::map<data::tuple2d, int> > > demands;

    // exp_demands store the orders generated by ExpectedDemandGenerator
    std::map<int, std::map<data::tuple2d, int> > exp_demands;

    // est_demands store the orders generated by EstimatedDemandGenerator
    std::map<int, std::vector<std::map<data::tuple2d, int> > > est_demands;
    
    // results store the results generated from planners, 
    // results[planner_type][experiment_id] = result
    std::map<std::string, std::map<int, ExperimentorResult> > results;

    /* Private methods */
    
    // runPlannerND create a DeterExperimentor, run one experiment, 
    // and then return result.
    ExperimentorResult runPlannerND(const int exper_id);
    
    // runPlannerNS create a StochExperimentor, run one experiment, 
    // and then return result.
    ExperimentorResult runPlannerNS(const int exper_id);
    
    // runPlannerAD create a ADExperimentor, run one experiment, 
    // and then return result.
    ExperimentorResult runPlannerAD(const int exper_id, const double alpha);
    
    // runPlannerAS create a ASExperimentor, run one experiment, 
    // and then return result.
    ExperimentorResult runPlannerAS(const int exper_id, const double alpha);

    // Check the valid of parameter for this controller
    bool hasValidSampleSize();
    bool hasValidAlphas();
    bool hasValidNumExperPlan();
    bool hasValidNumExperGen();

public:
    MyopicExpersController();

    // setNumExperPlan set the number of experiments for running planners
    void setNumExperPlan(const int num);

    // setNumExperGen set the number of experiments for generating evenets
    void setNumExperGen(const int num);

    // setSampleSive set the sample size for stochastic planners
    void setSampleSize(const int num);

    // setAlphas set the alpha for running adjusted planners
    void setAlphas(const std::vector<double>& alphas);

    // setAlphas set the alpha for running adjusted planners
    void setAlphas(const double from, const double to, const double step_size);

    // checkHasData check if readDataFolder has been called and cout alert
    // message
    bool checkHasData();

    // readDataFolder read all the data in given folder and store data
    // into this controller
    void readDataFolder(const std::string& folder);

    // generateEvents generates and stores all type of generators, 
    // including orders, demands, exp_demands, est_demands, given
    // number of experiments.
    void generateEvents();

    // runPlanner run the planner num_exper times and store the result of 
    // given planner
    void runPlanner(const std::string& planner_type);

    // runAll go through processes including reading data, generating events,
    // and running planners. If you want to store results after calling runAll,
    // please call storeAllResults(folder) and input the result-folder path.
    void runAll(const std::string& data_folder);

    // storeResult store the result of given planner type into a csv
    void storeResult(const std::string& planner_type, const std::string& path);
    
    // storeResults store all results into folder
    // Please make sure there is "/" for mac or "\" for windows after folder
    void storeAllResults(const std::string& folder);    

    void debug();
};


}

#endif /*caseController_hpp*/
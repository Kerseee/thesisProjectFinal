#ifndef caseController_hpp
#define caseController_hpp

#include <stdio.h>
#include <map>
#include <string>
#include <ostream>
#include <vector>
#include "data.hpp"
#include "planner.hpp"
#include "caseData.hpp"
#include "caseStructures.hpp"
#include "caseGenerator.hpp"
#include "casePlanner.hpp"

namespace planner {

class MyopicExpersController{
private:
    /* Variables */
    bool has_data;
    data::CaseData data;

    // orders store the orders generated by OrderGenerator
    std::map<int, std::map<int, Order> > orders;

    // demands store the orders generated by IndDemandGenerator
    std::map<int, std::map<int, std::map<data::tuple2d, int> > > demands;

    // exp_demands store the orders generated by ExpectedDemandGenerator
    std::map<int, std::map<data::tuple2d, int> > exp_demands;

    // est_demands store the orders generated by EstimatedDemandGenerator
    std::map<int, std::vector<std::map<data::tuple2d, int> > > est_demands;
    
    // results store the results generated from planners, 
    // results[planner_type][experiment_id] = result
    std::map<std::string, std::map<int, ExperimentorResult> > results;

    /* Private methods */
    
    // runPlannerND create a DeterExperimentor, run one experiment, 
    // and then return result.
    ExperimentorResult runPlannerND(const int exper_id);
    
    // // runPlannerNS create a StochExperimentor, run one experiment, 
    // // and then return result.
    // ExperimentorResult runPlannerNS(const int exper_id);
    
    // // runPlannerAD create a ADExperimentor, run one experiment, 
    // // and then return result.
    // ExperimentorResult runPlannerAD(const int exper_id);
    
    // // runPlannerAS create a ASExperimentor, run one experiment, 
    // // and then return result.
    // ExperimentorResult runPlannerAS(const int exper_id);

public:
    MyopicExpersController();

    // checkHasData check if readDataFolder has been called and cout alert
    // message
    bool checkHasData();

    // readDataFolder read all the data in given folder and store data
    // into this controller
    void readDataFolder(const std::string& folder);

    // generateEvents generates and stores all type of generators, 
    // including orders, demands, exp_demands, est_demands, given
    // number of experiments.
    void generateEvents(const int num_exper, const int sample_size);

    // runPlanner run the planner num_exper times
    void runPlanner(const std::string& planner_type, const int num_exper);

    // runAll go through all the process
    void runAll(
        const std::string& data_folder, 
        const int num_exper, 
        const int sample_size
    );

    // storeResults store all results into folder
    void storeResults(const std::string& folder);    
};


}

#endif /*caseController_hpp*/